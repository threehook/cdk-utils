"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constParam = exports.RestApi = void 0;
const cdk = require("@aws-cdk/core");
const apigateway = require("@aws-cdk/aws-apigateway");
const api_keys_1 = require("./api_keys");
const proxyparameter_1 = require("./proxyparameter");
class RestApi extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.api = new apigateway.RestApi(this, 'Api', RestApi.apiProps(props));
        if (props.apiKeys) {
            api_keys_1.addApiKeysToApi(this.api, props.apiKeys);
        }
        this.authorizer = props.authorizer;
        this.proxyRoot = props.proxyRoot ? props.proxyRoot : '/api';
        if (props.corsAllowOrigin) {
            this.newGatewayResponse(apigateway.ResponseType.DEFAULT_4XX, props.corsAllowOrigin);
            this.newGatewayResponse(apigateway.ResponseType.DEFAULT_5XX, props.corsAllowOrigin);
        }
    }
    static apiProps(props) {
        return {
            defaultCorsPreflightOptions: props.corsAllowOrigin ? {
                allowOrigins: [props.corsAllowOrigin],
                allowHeaders: ['Authorization,Content-Type'],
            } : undefined,
            defaultMethodOptions: {
                apiKeyRequired: (props.apiKeys !== undefined && props.apiKeys.length > 0),
            },
            apiKeySourceType: props.apiKeySourceType,
            deployOptions: {
                tracingEnabled: true,
                stageName: props.stage,
            },
            endpointConfiguration: {
                types: [apigateway.EndpointType.REGIONAL]
            },
            restApiName: props.name,
        };
    }
    get root() {
        return this.api.root;
    }
    newGatewayResponse(type, corsAllowOrigin) {
        return this.api.addGatewayResponse(`GatewayResponse${type.responseType}`, {
            type,
            responseHeaders: {
                'Access-Control-Allow-Origin': constParam(corsAllowOrigin),
                'Access-Control-Allow-Headers': constParam('Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'),
                'Access-Control-Allow-Methods': constParam('OPTIONS'),
            }
        });
    }
    withFunctionOn(path, method, fct) {
        let options = {};
        if (this.authorizer) {
            options = {
                authorizer: this.authorizer
            };
        }
        this.root.resourceForPath(path).addMethod(method, new apigateway.LambdaIntegration(fct), options);
    }
    withProxyOn(path, method, serverSecret, params) {
        const allParams = proxyparameter_1.unique(params.concat(proxyparameter_1.parametersFromPath(path)));
        this.root.resourceForPath(this.proxyRoot + path).addMethod(method, new apigateway.HttpIntegration(baseProxyUrl(serverSecret) + path, {
            httpMethod: method,
            proxy: false,
            options: {
                requestParameters: withAPIKey(proxyparameter_1.backendRequestParamsFor(allParams), serverSecret),
                requestTemplates: proxyparameter_1.requestTemplatesFor(allParams),
                integrationResponses: integrationResponses(),
                passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,
            }
        }), {
            authorizationType: apigateway.AuthorizationType.CUSTOM,
            authorizer: this.authorizer,
            requestParameters: proxyparameter_1.acceptRequestParamsFor(allParams),
            methodResponses: methodResponses(),
        });
    }
    ;
}
exports.RestApi = RestApi;
function baseProxyUrl(secret) {
    return secret.secretValueFromJson('url').toString();
}
function integrationResponses() {
    return supportedResponses.map(integrationResponseFor);
}
function methodResponses() {
    return supportedResponses.map((statusCode) => {
        return { statusCode: statusCode.toString(10) };
    });
}
function integrationResponseFor(statusCode) {
    const statusCodeStr = statusCode.toString(10);
    return {
        statusCode: statusCodeStr,
        selectionPattern: statusCodeStr, //TODO verify that cors is not necessary because of defaultCorsPreflightOptions
    };
}
function withAPIKey(requestParams, apiKeySecret) {
    requestParams['integration.request.header.X-API-Key'] = constParam(apiKeySecret.secretValueFromJson('apiKey').toString());
    return requestParams;
}
function constParam(parameter) {
    return `'${parameter}'`;
}
exports.constParam = constParam;
const supportedResponses = [200, 201, 202, 204, 400, 401, 403, 404, 405, 406, 408, 409, 412, 413, 422, 425, 428, 429, 500, 501, 502, 503, 504];
//# sourceMappingURL=data:application/json;base64,