"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnmonitoredFunction = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const logs = require("@aws-cdk/aws-logs");
class UnmonitoredFunction extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.code = lambda.Code.fromCfnParameters();
        this.function = new lambda.Function(this, id, ensureDefaults(props, this.code));
        this.path = props.path;
        new logs.LogGroup(this, 'LogGroup', {
            logGroupName: UnmonitoredFunction.logGroupName(this.function),
            retention: logs.RetentionDays.TWO_MONTHS,
        });
        cdk.Tags.of(this).add('dpg:lambda:path', props.path);
    }
    static logGroupName(fn) {
        return `/aws/lambda/${fn.functionName}`;
    }
}
exports.UnmonitoredFunction = UnmonitoredFunction;
const ensureDefaults = (props, code) => {
    return Object.assign({ code }, defaults, props);
};
const defaults = {
    runtime: lambda.Runtime.GO_1_X,
    handler: 'main',
    tracing: lambda.Tracing.ACTIVE,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tb25pdG9yZWRfZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1bm1vbml0b3JlZF9mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDBDQUEwQztBQVExQyxNQUFhLG1CQUFvQixTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBUWxELFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDekUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUpaLFNBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFNNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUV2QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNoQyxZQUFZLEVBQUUsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDN0QsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVTtTQUMzQyxDQUFDLENBQUM7UUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFuQkQsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFvQjtRQUNwQyxPQUFPLGVBQWUsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVDLENBQUM7Q0FrQko7QUFyQkQsa0RBcUJDO0FBRUQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUErQixFQUFFLElBQThCLEVBQXdCLEVBQUU7SUFDN0csT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHO0lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTTtJQUM5QixPQUFPLEVBQUUsTUFBTTtJQUNmLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU07Q0FDakMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnQGF3cy1jZGsvYXdzLWxvZ3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVubW9uaXRvcmVkRnVuY3Rpb25Qcm9wcyBleHRlbmRzIGxhbWJkYS5GdW5jdGlvbk9wdGlvbnMge1xuICAgIHJlYWRvbmx5IHJ1bnRpbWU/OiBsYW1iZGEuUnVudGltZTtcbiAgICByZWFkb25seSBoYW5kbGVyPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFVubW9uaXRvcmVkRnVuY3Rpb24gZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgICBzdGF0aWMgbG9nR3JvdXBOYW1lKGZuOiBsYW1iZGEuSUZ1bmN0aW9uKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAvYXdzL2xhbWJkYS8ke2ZuLmZ1bmN0aW9uTmFtZX1gO1xuICAgIH1cbiAgICByZWFkb25seSBmdW5jdGlvbjogbGFtYmRhLkZ1bmN0aW9uO1xuICAgIHJlYWRvbmx5IGNvZGUgPSBsYW1iZGEuQ29kZS5mcm9tQ2ZuUGFyYW1ldGVycygpO1xuICAgIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVW5tb25pdG9yZWRGdW5jdGlvblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgaWQsIGVuc3VyZURlZmF1bHRzKHByb3BzLCB0aGlzLmNvZGUpKTtcbiAgICAgICAgdGhpcy5wYXRoID0gcHJvcHMucGF0aDtcblxuICAgICAgICBuZXcgbG9ncy5Mb2dHcm91cCh0aGlzLCAnTG9nR3JvdXAnLCB7XG4gICAgICAgICAgICBsb2dHcm91cE5hbWU6IFVubW9uaXRvcmVkRnVuY3Rpb24ubG9nR3JvdXBOYW1lKHRoaXMuZnVuY3Rpb24pLFxuICAgICAgICAgICAgcmV0ZW50aW9uOiBsb2dzLlJldGVudGlvbkRheXMuVFdPX01PTlRIUyxcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjZGsuVGFncy5vZih0aGlzKS5hZGQoJ2RwZzpsYW1iZGE6cGF0aCcsIHByb3BzLnBhdGgpO1xuICAgIH1cbn1cblxuY29uc3QgZW5zdXJlRGVmYXVsdHMgPSAocHJvcHM6IFVubW9uaXRvcmVkRnVuY3Rpb25Qcm9wcywgY29kZTogbGFtYmRhLkNmblBhcmFtZXRlcnNDb2RlKTogbGFtYmRhLkZ1bmN0aW9uUHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgY29kZSB9LCBkZWZhdWx0cywgcHJvcHMpO1xufTtcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuR09fMV9YLFxuICAgIGhhbmRsZXI6ICdtYWluJyxcbiAgICB0cmFjaW5nOiBsYW1iZGEuVHJhY2luZy5BQ1RJVkUsXG59O1xuIl19