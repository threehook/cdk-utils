"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestTemplatesFor = exports.acceptRequestParamsFor = exports.backendRequestParamsFor = exports.parametersFromPath = exports.unique = exports.optional = exports.delivererId = exports.permissions = exports.username = exports.principalId = exports.multiQ = exports.q = exports.ParameterType = void 0;
var ParameterType;
(function (ParameterType) {
    ParameterType["QueryString"] = "querystring";
    ParameterType["MultiValueQueryString"] = "multivaluequerystring";
    ParameterType["Path"] = "path";
    ParameterType["Header"] = "header";
    ParameterType["AuthorizerContextToHeader"] = "context-to-header";
})(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
function q(name) {
    return {
        type: ParameterType.QueryString,
        name,
        required: true,
    };
}
exports.q = q;
function multiQ(name) {
    return {
        type: ParameterType.MultiValueQueryString,
        name,
        required: true,
    };
}
exports.multiQ = multiQ;
function principalId() {
    return {
        type: ParameterType.AuthorizerContextToHeader,
        name: 'principalId',
        required: true
    };
}
exports.principalId = principalId;
function username() {
    return {
        type: ParameterType.AuthorizerContextToHeader,
        name: 'username',
        required: true
    };
}
exports.username = username;
function permissions() {
    return {
        type: ParameterType.AuthorizerContextToHeader,
        name: 'permissions',
        required: false
    };
}
exports.permissions = permissions;
function delivererId() {
    return {
        type: ParameterType.AuthorizerContextToHeader,
        name: 'delivererId',
        required: false
    };
}
exports.delivererId = delivererId;
function optional(param) {
    return {
        type: param.type,
        name: param.name,
        required: false,
    };
}
exports.optional = optional;
function unique(value) {
    return [...new Set(value)];
}
exports.unique = unique;
function parametersFromPath(path) {
    return path
        .split("/")
        .filter((part) => {
        return (part.startsWith('{') && part.endsWith('}'));
    })
        .map((part) => {
        return {
            type: ParameterType.Path,
            name: part.substring(1, part.length - 1),
            required: true,
        };
    });
}
exports.parametersFromPath = parametersFromPath;
function backendRequestParamsFor(params) {
    const requestParams = {};
    params.filter(param => param.type != ParameterType.AuthorizerContextToHeader)
        .forEach((param) => {
        requestParams[integrationRequestParamNameFor(param)] = methodRequestParamNameFor(param);
    });
    return requestParams;
}
exports.backendRequestParamsFor = backendRequestParamsFor;
function acceptRequestParamsFor(params) {
    let value = {};
    params.filter(param => param.type != ParameterType.AuthorizerContextToHeader)
        .forEach((param) => {
        value[methodRequestParamNameFor(param, ParameterType.QueryString)] = param.required;
    });
    return value;
}
exports.acceptRequestParamsFor = acceptRequestParamsFor;
// Hack to be able to set the headers from the context authorizer values.
// This is not possible via the request parameters.
function requestTemplatesFor(params) {
    const authParams = params.filter(param => param.type == ParameterType.AuthorizerContextToHeader);
    if (authParams.length == 0) {
        return undefined;
    }
    return {
        "application/json": `$input.json("$")\n` + authParams
            .map(param => `#set($context.requestOverride.header.authorizer-${param.name} = $context.authorizer.${param.name})`)
            .join("\n")
    };
}
exports.requestTemplatesFor = requestTemplatesFor;
function integrationRequestParamNameFor(param) {
    if (param.type == ParameterType.MultiValueQueryString) {
        return `integration.request.${ParameterType.QueryString}.${param.name}`;
    }
    return `integration.request.${param.type}.${param.name}`;
}
function methodRequestParamNameFor(param, mapMultiTo) {
    if (mapMultiTo && param.type == ParameterType.MultiValueQueryString) {
        return `method.request.${mapMultiTo}.${param.name}`;
    }
    return `method.request.${param.type}.${param.name}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHlwYXJhbWV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm94eXBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLGFBTVg7QUFORCxXQUFZLGFBQWE7SUFDckIsNENBQTJCLENBQUE7SUFDM0IsZ0VBQStDLENBQUE7SUFDL0MsOEJBQWEsQ0FBQTtJQUNiLGtDQUFpQixDQUFBO0lBQ2pCLGdFQUErQyxDQUFBO0FBQ25ELENBQUMsRUFOVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQU14QjtBQVFELFNBQWdCLENBQUMsQ0FBQyxJQUFZO0lBQzFCLE9BQU87UUFDSCxJQUFJLEVBQUUsYUFBYSxDQUFDLFdBQVc7UUFDL0IsSUFBSTtRQUNKLFFBQVEsRUFBRSxJQUFJO0tBQ2pCLENBQUE7QUFDTCxDQUFDO0FBTkQsY0FNQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxJQUFZO0lBQy9CLE9BQU87UUFDSCxJQUFJLEVBQUUsYUFBYSxDQUFDLHFCQUFxQjtRQUN6QyxJQUFJO1FBQ0osUUFBUSxFQUFFLElBQUk7S0FDakIsQ0FBQTtBQUNMLENBQUM7QUFORCx3QkFNQztBQUVELFNBQWdCLFdBQVc7SUFDdkIsT0FBTztRQUNILElBQUksRUFBRSxhQUFhLENBQUMseUJBQXlCO1FBQzdDLElBQUksRUFBRSxhQUFhO1FBQ25CLFFBQVEsRUFBRSxJQUFJO0tBQ2pCLENBQUE7QUFDTCxDQUFDO0FBTkQsa0NBTUM7QUFFRCxTQUFnQixRQUFRO0lBQ3BCLE9BQU87UUFDSCxJQUFJLEVBQUUsYUFBYSxDQUFDLHlCQUF5QjtRQUM3QyxJQUFJLEVBQUUsVUFBVTtRQUNoQixRQUFRLEVBQUUsSUFBSTtLQUNqQixDQUFBO0FBQ0wsQ0FBQztBQU5ELDRCQU1DO0FBRUQsU0FBZ0IsV0FBVztJQUN2QixPQUFPO1FBQ0gsSUFBSSxFQUFFLGFBQWEsQ0FBQyx5QkFBeUI7UUFDN0MsSUFBSSxFQUFFLGFBQWE7UUFDbkIsUUFBUSxF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O2FBQ2hELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLG1EQUFtRCxLQUFLLENBQUMsSUFBSSwwQkFBMEIsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDO2FBQ2xILElBQUksQ0FBQyxJQUFJLENBQUM7S0FDbEIsQ0FBQztBQUNOLENBQUM7QUFWRCxrREFVQztBQUdELFNBQVMsOEJBQThCLENBQUMsS0FBcUI7SUFDekQsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRTtRQUNuRCxPQUFPLHVCQUF1QixhQUFhLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUMxRTtJQUNELE9BQU8sdUJBQXVCLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQzVELENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUFDLEtBQXFCLEVBQUUsVUFBMEI7SUFDaEYsSUFBSSxVQUFVLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMscUJBQXFCLEVBQUU7UUFDakUsT0FBTyxrQkFBa0IsVUFBVSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUN2RDtJQUNELE9BQU8sa0JBQWtCLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBQYXJhbWV0ZXJUeXBlIHtcbiAgICBRdWVyeVN0cmluZyA9ICdxdWVyeXN0cmluZycsXG4gICAgTXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nID0gJ211bHRpdmFsdWVxdWVyeXN0cmluZycsXG4gICAgUGF0aCA9ICdwYXRoJyxcbiAgICBIZWFkZXIgPSAnaGVhZGVyJyxcbiAgICBBdXRob3JpemVyQ29udGV4dFRvSGVhZGVyID0gJ2NvbnRleHQtdG8taGVhZGVyJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm94eVBhcmFtZXRlciB7XG4gICAgcmVhZG9ubHkgdHlwZTogUGFyYW1ldGVyVHlwZTtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcmVxdWlyZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxKG5hbWU6IHN0cmluZyk6IFByb3h5UGFyYW1ldGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBQYXJhbWV0ZXJUeXBlLlF1ZXJ5U3RyaW5nLFxuICAgICAgICBuYW1lLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aVEobmFtZTogc3RyaW5nKTogUHJveHlQYXJhbWV0ZXIge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFBhcmFtZXRlclR5cGUuTXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nLFxuICAgICAgICBuYW1lLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmluY2lwYWxJZCgpOiBQcm94eVBhcmFtZXRlciB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUGFyYW1ldGVyVHlwZS5BdXRob3JpemVyQ29udGV4dFRvSGVhZGVyLFxuICAgICAgICBuYW1lOiAncHJpbmNpcGFsSWQnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJuYW1lKCk6IFByb3h5UGFyYW1ldGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBQYXJhbWV0ZXJUeXBlLkF1dGhvcml6ZXJDb250ZXh0VG9IZWFkZXIsXG4gICAgICAgIG5hbWU6ICd1c2VybmFtZScsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVybWlzc2lvbnMoKTogUHJveHlQYXJhbWV0ZXIge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFBhcmFtZXRlclR5cGUuQXV0aG9yaXplckNvbnRleHRUb0hlYWRlcixcbiAgICAgICAgbmFtZTogJ3Blcm1pc3Npb25zJyxcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsaXZlcmVySWQoKTogUHJveHlQYXJhbWV0ZXIge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFBhcmFtZXRlclR5cGUuQXV0aG9yaXplckNvbnRleHRUb0hlYWRlcixcbiAgICAgICAgbmFtZTogJ2RlbGl2ZXJlcklkJyxcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3B0aW9uYWwocGFyYW06IFByb3h5UGFyYW1ldGVyKTogUHJveHlQYXJhbWV0ZXIge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBhcmFtLnR5cGUsXG4gICAgICAgIG5hbWU6IHBhcmFtLm5hbWUsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmlxdWUodmFsdWU6IFByb3h5UGFyYW1ldGVyW10pOiBQcm94eVBhcmFtZXRlcltdIHtcbiAgICByZXR1cm4gWy4uLm5ldyBTZXQodmFsdWUpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtZXRlcnNGcm9tUGF0aChwYXRoOiBzdHJpbmcpOiBQcm94eVBhcmFtZXRlcltdIHtcbiAgICByZXR1cm4gcGF0aFxuICAgICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAgIC5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChwYXJ0LnN0YXJ0c1dpdGgoJ3snKSAmJiBwYXJ0LmVuZHNXaXRoKCd9JykpXG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAoKHBhcnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBQYXJhbWV0ZXJUeXBlLlBhdGgsXG4gICAgICAgICAgICAgICAgbmFtZTogcGFydC5zdWJzdHJpbmcoMSwgcGFydC5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2tlbmRSZXF1ZXN0UGFyYW1zRm9yKHBhcmFtczogUHJveHlQYXJhbWV0ZXJbXSk6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9IHtcbiAgICBjb25zdCByZXF1ZXN0UGFyYW1zOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgIHBhcmFtcy5maWx0ZXIocGFyYW0gPT4gcGFyYW0udHlwZSAhPSBQYXJhbWV0ZXJUeXBlLkF1dGhvcml6ZXJDb250ZXh0VG9IZWFkZXIpXG4gICAgICAgIC5mb3JFYWNoKChwYXJhbTogUHJveHlQYXJhbWV0ZXIpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RQYXJhbXNbaW50ZWdyYXRpb25SZXF1ZXN0UGFyYW1OYW1lRm9yKHBhcmFtKV0gPSBtZXRob2RSZXF1ZXN0UGFyYW1OYW1lRm9yKHBhcmFtKTtcbiAgICAgICAgfSlcbiAgICByZXR1cm4gcmVxdWVzdFBhcmFtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdFJlcXVlc3RQYXJhbXNGb3IocGFyYW1zOiBQcm94eVBhcmFtZXRlcltdKTogeyBbbmFtZTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICBsZXQgdmFsdWU6IHsgW25hbWU6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9XG4gICAgcGFyYW1zLmZpbHRlcihwYXJhbSA9PiBwYXJhbS50eXBlICE9IFBhcmFtZXRlclR5cGUuQXV0aG9yaXplckNvbnRleHRUb0hlYWRlcilcbiAgICAgICAgLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICB2YWx1ZVttZXRob2RSZXF1ZXN0UGFyYW1OYW1lRm9yKHBhcmFtLCBQYXJhbWV0ZXJUeXBlLlF1ZXJ5U3RyaW5nKV0gPSBwYXJhbS5yZXF1aXJlZDtcbiAgICAgICAgfSlcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIEhhY2sgdG8gYmUgYWJsZSB0byBzZXQgdGhlIGhlYWRlcnMgZnJvbSB0aGUgY29udGV4dCBhdXRob3JpemVyIHZhbHVlcy5cbi8vIFRoaXMgaXMgbm90IHBvc3NpYmxlIHZpYSB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RUZW1wbGF0ZXNGb3IocGFyYW1zOiBQcm94eVBhcmFtZXRlcltdKTogeyBbZGVzdDogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGF1dGhQYXJhbXMgPSBwYXJhbXMuZmlsdGVyKHBhcmFtID0+IHBhcmFtLnR5cGUgPT0gUGFyYW1ldGVyVHlwZS5BdXRob3JpemVyQ29udGV4dFRvSGVhZGVyKTtcbiAgICBpZiAoYXV0aFBhcmFtcy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIjogYCRpbnB1dC5qc29uKFwiJFwiKVxcbmAgKyBhdXRoUGFyYW1zXG4gICAgICAgICAgICAubWFwKHBhcmFtID0+IGAjc2V0KCRjb250ZXh0LnJlcXVlc3RPdmVycmlkZS5oZWFkZXIuYXV0aG9yaXplci0ke3BhcmFtLm5hbWV9ID0gJGNvbnRleHQuYXV0aG9yaXplci4ke3BhcmFtLm5hbWV9KWApXG4gICAgICAgICAgICAuam9pbihcIlxcblwiKVxuICAgIH07XG59XG5cblxuZnVuY3Rpb24gaW50ZWdyYXRpb25SZXF1ZXN0UGFyYW1OYW1lRm9yKHBhcmFtOiBQcm94eVBhcmFtZXRlcik6IHN0cmluZyB7XG4gICAgaWYgKHBhcmFtLnR5cGUgPT0gUGFyYW1ldGVyVHlwZS5NdWx0aVZhbHVlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGBpbnRlZ3JhdGlvbi5yZXF1ZXN0LiR7UGFyYW1ldGVyVHlwZS5RdWVyeVN0cmluZ30uJHtwYXJhbS5uYW1lfWBcbiAgICB9XG4gICAgcmV0dXJuIGBpbnRlZ3JhdGlvbi5yZXF1ZXN0LiR7cGFyYW0udHlwZX0uJHtwYXJhbS5uYW1lfWBcbn1cblxuZnVuY3Rpb24gbWV0aG9kUmVxdWVzdFBhcmFtTmFtZUZvcihwYXJhbTogUHJveHlQYXJhbWV0ZXIsIG1hcE11bHRpVG8/OiBQYXJhbWV0ZXJUeXBlKTogc3RyaW5nIHtcbiAgICBpZiAobWFwTXVsdGlUbyAmJiBwYXJhbS50eXBlID09IFBhcmFtZXRlclR5cGUuTXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBgbWV0aG9kLnJlcXVlc3QuJHttYXBNdWx0aVRvfS4ke3BhcmFtLm5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIGBtZXRob2QucmVxdWVzdC4ke3BhcmFtLnR5cGV9LiR7cGFyYW0ubmFtZX1gO1xufVxuIl19